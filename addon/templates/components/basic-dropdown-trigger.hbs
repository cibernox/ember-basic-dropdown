{{#let (element (or @htmlTag "div")) as |Element|}}
  <Element
    class="ember-basic-dropdown-trigger{{if @renderInPlace " ember-basic-dropdown-trigger--in-place"}}{{if @hPosition (concat " ember-basic-dropdown-trigger--" @hPosition)}}{{if @vPosition (concat " ember-basic-dropdown-trigger--" @vPosition)}} {{@defaultClass}}"
    role="button"
    tabindex={{unless @dropdown.disabled "0"}}
    data-ebd-id="{{@dropdown.uniqueId}}-trigger"
    aria-owns="ember-basic-dropdown-content-{{@dropdown.uniqueId}}"
    aria-expanded="{{@dropdown.isOpen}}"
    aria-disabled={{if @dropdown.disabled "true"}}
    {{will-destroy this.removeGlobalHandlers}}

    {{!-- V1 compatibility - See #498 --}}
    {{!-- Use default handlers as fallback --}}
    {{on "click" (fn (or @onClick this.handleClick) @dropdown)}}
    {{on "keydown" (fn (or @onKeyDown this.handleKeyDown) @dropdown)}}
    {{on "mousedown" (fn (or @onMouseDown this.handleMouseDown) @dropdown)}}
    {{on "touchend" (fn (or @onTouchEnd this.handleTouchEnd) @dropdown)}}
    {{on "touchstart" (fn (or @onTouchStart this.handleTouchStart) @dropdown)}}

    {{!-- Use no-ops where we don't have a default handlers --}}
    {{on "blur" (fn (or @onBlur this.noop) @dropdown)}}
    {{on "focus" (fn (or @onFocus this.noop) @dropdown)}}
    {{on "focusin" (fn (or @onFocusIn this.noop) @dropdown)}}
    {{on "focusout" (fn (or @onFocusOut this.noop) @dropdown)}}
    {{on "mouseenter" (fn (or @onMouseEnter this.noop) @dropdown)}}
    {{on "mouseleave" (fn (or @onMouseLeave this.noop) @dropdown)}}

    ...attributes
    >
    {{yield}}
  </Element>
{{/let}}
