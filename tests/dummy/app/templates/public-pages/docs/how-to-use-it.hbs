<h1 class="doc-page-title">How to use it</h1>

<p>
  This component is built with a technique known as <em>Contextual Components</em>. If you haven't
  heard of it, check <a href="https://guides.emberjs.com/v2.8.0/components/wrapping-content-in-a-component/#toc_sharing-component-data-with-its-wrapped-content">the official guides</a> for some background.
</p>

<p>
  The basic usage is pretty simple. There are no mandatory fields. Just invoke the <code>basic-dropdown</code> component which
  yields the public API to its block. That top-level component has no markup, just pure behaviour.
  Once inside the block, the yielded API has two contextual components on it that you can use: <code>trigger</code> and <code>content</code>.
</p>

<p>
  Go, use it and inspect the DOM. I know it looks ugly, we'll style it later.
</p>

{{#code-example hbs="how-to-use-it-1.hbs" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<p>
  As you've inspected, the markup is very simple.
</p>
<p>
  The <code>\{{dd.trigger}}</code> component
  generates a simple div with some self-explainatory classes and <code>\{{dd.content}}</code>
  doesn't render anything until you open the select.
</p>

<p>
  Out of the box the component already takes care of most things you need.
</p>

<p>
  First of all, the component opens when you click on the trigger and closes when you click
  anywhere else in the page.
  If you are reading this on a smartphone you can also see that it opens when you tap on the
  trigger and it already distinguishes proper taps from taps used for scrolling.
  The dropdown is rendered not next to the trigger, but in a placeholder div in the root of the
  application and positioned automatically with inline styles.
</p>

<p>
  Lastly, if you inspect the DOM a second time you can see all the <strong>a11y</strong> machinery
  in place to make the component accesible. Even the trigger, despite being a div, is focusable
  as it should be for a good keyboard experience. Also if you have the trigger focus,
  you can open and close it with the enter or space keys.
</p>

<p>
  Now let's fix that terrible look. I'll give the dropdown a look and feel inspired by
  dropdown buttons in bootstrap:
</p>

{{#code-example hbs="how-to-use-it-2.hbs"  css="how-to-use-it-2-css.scss" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<p>
  It just took a little bit of CSS. You could also have just assigned the right classes and
  reused the styles from the framework (I can't demo that because I don't have bootstrap here).
</p>

<p>
  I want to stress that when it comes to CSS, the dropdown really doesn't care. Let's make
  a material-like round button with a round content.
</p>

{{#code-example hbs="how-to-use-it-3.hbs"  css="how-to-use-it-3-css.scss" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<p>
  I got you.
</p>

<p>
  And this is more or less everything you need to know about styles. Basically there is none,
  so you can add create your own in CSS or reuse the classes that CSS frameworks give you.
</p>

<p>
  In the next section we will see the basic action hooks that this component gives you to
  hook to events like opening and closing and many others.
</p>

<div class="doc-page-nav">
  <a href={{href-to "public-pages.docs.installation"}} class="doc-page-nav-link-prev">&lt; Installation</a>
  <a href={{href-to "public-pages.docs.dropdown-events"}} class="doc-page-nav-link-next">Dropdown events &gt;</a>
</div>
