<h1 class="doc-page-title">Trigger events</h1>

<p>
  The trigger is the component in charge of opening and closing the dropdown (although it also closes
  if you click outside it). By default the event that to which the trigger reacts is the <code>click</code>
  event.
</p>

<p>
  You can change that passing the <code>eventType="mousedown"</code> to the trigger. Check below both
  approaches. The different is subtle.
</p>

<CodeExample @hbs="trigger-events-0.hbs" as |partialName|>
  {{partial partialName}}
</CodeExample>

<p>
  This does not affect to the behavior of the dropdown on touch devices. On mobile or tablets the
  dropdown automatically depends on the <code>"touchend"</code> event.
</p>

<h2>Event handlers</h2>

<p>
  As with any regular HTML element, you can attach events to the trigger using the <code>\{{on}}</code>
  element modifier. The events you subscribe to using this approach will aways run before the default
  events that this component attaches, giving you a chance to prevent the default behavior by calling
  <code>event.stopImmediatePropagation()</code>.
</p>

<p>
  What can you do with this? Let's see some examples.
</p>

<h3><code>\{{on "keydown"}}</code></h3>

<p>
  One real world situation where I found this to be necessary, is when you want to
  open the dropdown with a key that usually does not open it, like by example
  the arrow keys.
</p>

<CodeExample @hbs="trigger-events-1.hbs" @js="trigger-events-1-js.js" as |partialName|>
  {{partial partialName}}
</CodeExample>

<p>
  As with any other event, calling <code>e.stopImmediatePropagation()</code> will stop the default handler from running,
  so you can use this action to prevent the <kbd>space</kbd>, <kbd>enter</kbd> and <kbd>esc</kbd>
  keys from doing what they do by default.
</p>

<h3><code>\{{on "click"}}</code></h3>

<p>
  The <code>click</code> event is the one that usually opens the dropdown,
  but you can pass your own function.
</p>

<p>
  Good examples of this are preventing the component from opening with the mouse and/or
  react in some way to those attempts.
</p>

<CodeExample @hbs="trigger-events-2.hbs" @js="trigger-events-2-js.js" as |partialName|>
  {{partial partialName}}
</CodeExample>

<h3><code>\{{on "touchend"}}</code></h3>

<p>
  Exactly identical to <code>\{{on "click"}}</code> but for touch screens. I'm not even going
  to create another example.
</p>

<h3><code>\{{on "mouseenter"}} / \{{on "mouseleave"}}</code></h3>

<p>
  I use this event to open the dropdown when you hover it and close it when you leave but
  you can really use it a lot more.
</p>

<p>
  By example, imagine that a dropdown is disabled and you want to highlight
  some other element in the form that the user must enable first.
</p>

<CodeExample @hbs="trigger-events-3.hbs" @js="trigger-events-3-js.js" as |partialName|>
  {{partial partialName}}
</CodeExample>

<h3><code>\{{on "focus"}}/\{{on "blur"}}</code></h3>

<p>
  I've used this two events in conjuntion to style a parent element while some of the
  components inside it have the focus, achieving a poor mans' version of the upcoming CSS
  <code>:focus-within</code> pseudo selector.
</p>

<CodeExample @hbs="trigger-events-4.hbs" @js="trigger-events-4-js.js" as |partialName|>
  {{partial partialName}}
</CodeExample>

<p>
  This is the most involved example yet. Both the text input and the trigger are focusable on their
  own, but by tracking when they get and loose the focus we simulate that the entire
  input-group is focused, which would be impossible just just CSS today.
</p>

<p>
  Right now this behavior cannot be achieved across browsers without some help from javascript.
</p>

<p>
  Those are just some examples of the kind of behaviors you can implement adding custom events to the
  trigger.
</p>

<div class="doc-page-nav">
  <a href={{href-to "public-pages.docs.dropdown-events"}} class="doc-page-nav-link-prev">&lt; Dropdown events</a>
  <a href={{href-to "public-pages.docs.content-events"}} class="doc-page-nav-link-next">Content events &gt;</a>
</div>