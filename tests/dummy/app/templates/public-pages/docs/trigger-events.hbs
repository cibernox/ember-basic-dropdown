<h1 class="doc-page-title">Trigger events</h1>

<p>
  The trigger is the component in charge of opening and closing the dropdown (although it also closes
  if you click outside it). By default the event that to which the trigger reacts is the <code>mouseDown</code>
  event, not the `click` event.
</p>

<p>
  You can change that passing the <code>eventType="click"</code> to the trigger. Check below both
  approaches. The different is subtle.
</p>

{{#code-example hbs="trigger-events-0.hbs" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<p>
  This does not affect to the behavior of the dropdown on touch devices. On mobile or tablets the
  dropdown automatically depends on the <code>"touchend"</code> event.
</p>

<h2>Event handlers</h2>

<p>
  As with the previous component, the events fired are named after the DOM events
  that trigger them, but camelcased.
  accepts a lot of actions whose name is <code>on&lt;EventName&gt;></code>.
</p>

<p>
  Therefore, <code>mousedown</code> events will fire the <code>onMouseDown</code>,
  <code>keydown</code> events will fire <code>onKeyDown</code> and so on.
</p>

<p>
  Let's see some examples.
</p>

<h3><code>onKeyDown(dropdown, event)</code></h3>

<p>
  One real world situation where I found this to be necessary, is when you want to
  open the dropdown with a key that usually does not open it, like by example
  the arrow keys.
</p>

{{#code-example hbs="trigger-events-1.hbs" js="trigger-events-1-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<p>
  As with any other event, returning <code>false</code> will prevent the default behavior,
  so you can use this action to prevent the <kbd>space</kbd>, <kbd>enter</kbd> and <kbd>esc</kbd>
  keys from doing what they do by default.
</p>

<h3><code>onClick(dropdown, event)</code></h3>

<p>
  The <code>click</code> event is the one that usually opens the dropdown,
  but you can pass your own function.
</p>

<p>
  Good examples of this are preventing the component from opening with the mouse and/or
  react in some way to those attempts.
</p>

{{#code-example hbs="trigger-events-2.hbs" js="trigger-events-2-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<h3><code>onTouchEnd(dropdown, event)</code></h3>

<p>
  Exactly identical to <code>onMouseDown</code> but for touch screens. I'm not even going
  to create another example.
</p>

<h3><code>onMouseEnter / onMouseLeave(dropdown, event)</code></h3>

<p>
  I use this event to open the dropdown when you hover it and close it when you leave but
  you can really use it a lot more.
</p>

<p>
  By example, imagine that a dropdown is disabled and you want to highlight
  some other element in the form that the user must enable first.
</p>

{{#code-example hbs="trigger-events-3.hbs" js="trigger-events-3-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<h3><code>onFocus/onBlur(dropdown, event)</code></h3>

<p>
  I've used this two events in conjuntion to style a parent element while some of the
  components inside it have the focus, achieving a poor mans' version of the upcoming CSS
  <code>:focus-within</code> pseudo selector.
</p>

{{#code-example hbs="trigger-events-4.hbs" js="trigger-events-4-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-example}}

<p>
  This is the most involved example yet. Both the text input and the trigger are focusable on their
  own, but by tracking when they get and loose the focus we simulate that the entire
  input-group is focused, which would be impossible just just CSS today.
</p>

<p>
  Right now this behaviour cannot be attaine
</p>

<h3><code>onFocusIn/onFocusOut(dropdown, event)</code></h3>

<p>
  Similar to <code>onFocus/onBlur</code>, but for the <code>focusin/focusout</code> events.
</p>

<p>
  Beware that those event are <a href="http://caniuse.com/#feat=focusin-focusout-events">not supported in firefox</a> at the time of this writing.
</p>

<p>
  This are all the events the trigger can handle. They are a bit low level but the goal
  is giving you as much control as posible so you can build a wrapper that works how you
  want it to work that hides this low-level events.
</p>

<div class="doc-page-nav">
  <LinkTo @route="public-pages.docs.dropdown-events" class="doc-page-nav-link-prev">&lt; Dropdown events</LinkTo>
  <LinkTo @route="public-pages.docs.content-events" class="doc-page-nav-link-next">Content events &gt;</LinkTo>
</div>